#!/usr/bin/perl -w

use YAML;
use strict;
use warnings;

my (%OPS, %m_indices, @MAP, %DOC, $map);

my $xml = shift @ARGV;

open F, "cat @ARGV |" or die "OPS*: $!";
while (<F>) {
  if ( /^\s+_fmt\((\w+),\s+N_\("(.+)"\)\)/ ) {
    $OPS{$1} = $2;
  }
}
close F;

my $num_ops = scalar(keys(%OPS));
if ( $num_ops == 0 ) {
  die "No OPS found. Has the syntax changed?";
}

while (<STDIN>) {
  if (/^const struct Binding Op.*{ \/\* map: (.*) \*\//) {
    $map = $1;
    $DOC{$map} = "";
  }
  if ($map and /^\s*\*\*\s*(.*)/) {
    $DOC{$map} .= "$1\n";
  }
  if ($map and /{\s*"(.+)"\s*,\s*(\w+)\s*,\s*(?:"([^"]+)"|(\w+))\s*}/) {
    my ($function, $op, $binding) = ($1, $2, $3 || $4);
    $binding =~ s/&/&amp;/;
    # for <key>, try CamelCasing into <Key>
    $binding =~ s/<(.)(.+)>/&lt;\U$1\E$2&gt;/;
    $binding =~ s/</&lt;/;
    $binding =~ s/>/&gt;/;
    $binding =~ s/ /&lt;Space&gt;/;
    $binding =~ s/^\\033/Esc /;
    $binding =~ s/^\\010/&lt;Backspace&gt;/;
    $binding =~ s/^\\(0\d+)$/'^'.chr(64+oct($1))/e;
    $binding =~ s/^\\(0\d+)(.)/'^'.chr(64+oct($1)) ." $2"/e;
    $binding =~ s/\\t/&lt;Tab&gt;/;
    $binding =~ s/\\r/&lt;Return&gt;/;
    $binding =~ s/\\n/&lt;Enter&gt;/;
    $binding =~ s/NULL//;
    die "unknown key $binding" if $binding =~ /\\[^\\]|<|>/;
    die "unknown OP $op" unless $OPS{$op};

		if (not defined $m_indices{$map}) {
			$m_indices{$map} = scalar @MAP;
			$MAP[$m_indices{$map}]{grouping} = $map;
		}

		my $index = defined $MAP[$m_indices{$map}]{"funcs"}[0] ? @{ $MAP[$m_indices{$map}]{"funcs"} }: 0;
		%{ $MAP[$m_indices{$map}]{funcs}[$index] } = ("title" => $function, "default" => $binding, desc => $OPS{$op});

  }
  if ($map and /^}/) {
		undef $map;
  }
}

print Dump(\@MAP);
